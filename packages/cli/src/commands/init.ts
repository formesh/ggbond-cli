import prompts from 'prompts';
import { join, dirname } from 'path';
import {
  readFileSync,
  writeFileSync,
  mkdirSync,
  existsSync,
  cpSync,
  unlinkSync,
} from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// 项目初始化函数
export async function initProject(projectName: string, options: any) {
  let name = projectName;
  // 如果没有提供项目名称，通过交互式提示获取
  if (!name) {
    const response = await prompts({
      type: 'text',
      name: 'projectName',
      message: '请输入项目名称:',
      validate: value => (value.trim() ? true : '项目名称不能为空'),
    });
    if (!response.projectName) {
      console.log('❌ 操作已取消');
      return;
    }
    name = response.projectName;
  }

  // 选择框架
  const frameworkResponse = await prompts({
    type: 'select',
    name: 'framework',
    message: '选择项目框架:',
    choices: [
      { title: 'React', value: 'react' },
      { title: 'Vue', value: 'vue' },
      { title: 'Vanilla', value: 'vanilla' },
    ],
    initial: 0,
  });

  if (!frameworkResponse.framework) {
    console.log('❌ 操作已取消');
    return;
  }

  // 选择是否使用 TypeScript
  const typescriptResponse = await prompts({
    type: 'confirm',
    name: 'useTypeScript',
    message: '是否使用 TypeScript?',
    initial: true,
  });
  if (typescriptResponse.useTypeScript === undefined) {
    console.log('❌ 操作已取消');
    return;
  }
  // 根据选择确定模板
  const template = `template-${frameworkResponse.framework}${typescriptResponse.useTypeScript ? '-ts' : ''}`;
  console.log(`🚀 正在创建项目: ${name}`);
  console.log(`📦 使用模板: ${template}`);
  // 创建项目目录
  const projectPath = join(process.cwd(), name);
  if (existsSync(projectPath)) {
    const overwrite = await prompts({
      type: 'confirm',
      name: 'overwrite',
      message: `目录 ${name} 已存在，是否覆盖？`,
      initial: false,
    });

    if (!overwrite.overwrite) {
      console.log('❌ 操作已取消');
      return;
    }
  }
  mkdirSync(projectPath, { recursive: true });
  // 生成项目文件
  await generateProjectFiles(projectPath, name, template);
  console.log('✅ 项目创建成功!');
  console.log(`\n📁 项目路径: ${projectPath}`);
  console.log('\n🎯 下一步:');
  console.log(`   cd ${name}`);
  console.log('   npm install');
  console.log('   npm run dev');
}

// 生成项目文件
async function generateProjectFiles(
  projectPath: string,
  projectName: string,
  template: string
) {
  // 获取模板路径
  const templatePath = join(__dirname, '../../templates', template);
  if (!existsSync(templatePath)) {
    throw new Error(`模板 ${template} 不存在`);
  }
  // 复制模板文件
  cpSync(templatePath, projectPath, { recursive: true });
  // 更新 package.json 中的项目名称
  const packageJsonPath = join(projectPath, 'package.json');
  if (existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));
    packageJson.name = projectName;
    packageJson.description = `${projectName} - Generated by GGBond CLI`;
    writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  }
  // 重命名 _gitignore 为 .gitignore
  const gitignorePath = join(projectPath, '_gitignore');
  const newGitignorePath = join(projectPath, '.gitignore');
  if (existsSync(gitignorePath)) {
    const gitignoreContent = readFileSync(gitignorePath, 'utf-8');
    writeFileSync(newGitignorePath, gitignoreContent);
    // 删除原文件
    unlinkSync(gitignorePath);
  }
}
