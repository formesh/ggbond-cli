#!/usr/bin/env node

import { Command } from 'commander';
import prompts from 'prompts';
import { join, dirname } from 'path';
import { readFileSync, writeFileSync, mkdirSync, existsSync, cpSync } from 'fs';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// 读取 package.json 获取版本信息
const packageJsonPath = join(__dirname, '../package.json');
const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));

const program = new Command();

program
  .name('ggbond')
  .description('GGBond CLI - 一个强大的项目脚手架工具')
  .version(packageJson.version);

// init 命令 - 项目生成
program
  .command('init')
  .description('初始化一个新项目')
  .argument('[project-name]', '项目名称')
  .option('-t, --template <template>', '项目模板类型', 'basic')
  .action(async (projectName, options) => {
    try {
      await initProject(projectName, options);
    } catch (error) {
      console.error('❌ 项目初始化失败:', error instanceof Error ? error.message : String(error));
      process.exit(1);
    }
  });

// build 命令 - 项目打包
program
  .command('build')
  .description('构建项目')
  .option('-e, --env <environment>', '构建环境', 'production')
  .option('-o, --output <dir>', '输出目录', 'dist')
  .action(async (options) => {
    try {
      await buildProject(options);
    } catch (error) {
      console.error('❌ 项目构建失败:', error instanceof Error ? error.message : String(error));
      process.exit(1);
    }
  });

// dev 命令 - 开发服务器
program
  .command('dev')
  .description('启动开发服务器')
  .option('-p, --port <port>', '端口号', '3000')
  .option('-h, --host <host>', '主机地址', 'localhost')
  .action(async (options) => {
    try {
      await startDevServer(options);
    } catch (error) {
      console.error('❌ 开发服务器启动失败:', error instanceof Error ? error.message : String(error));
      process.exit(1);
    }
  });

// 项目初始化函数
async function initProject(projectName: string, options: any) {
  let name = projectName;
  
  // 如果没有提供项目名称，通过交互式提示获取
  if (!name) {
    const response = await prompts({
      type: 'text',
      name: 'projectName',
      message: '请输入项目名称:',
      validate: (value) => value.trim() ? true : '项目名称不能为空'
    });
    
    if (!response.projectName) {
      console.log('❌ 操作已取消');
      return;
    }
    
    name = response.projectName;
  }
  
  // 选择项目模板
  const templateResponse = await prompts({
    type: 'select',
    name: 'template',
    message: '选择项目模板:',
    choices: [
      { title: 'React + TypeScript', value: 'react-ts' },
      { title: 'Vue + TypeScript', value: 'vue-ts' },
      { title: 'Node.js + Express', value: 'node-express' },
      { title: 'Basic TypeScript', value: 'basic-ts' }
    ],
    initial: 0
  });
  
  if (!templateResponse.template) {
    console.log('❌ 操作已取消');
    return;
  }
  
  console.log(`🚀 正在创建项目: ${name}`);
  console.log(`📦 使用模板: ${templateResponse.template}`);
  
  // 创建项目目录
  const projectPath = join(process.cwd(), name);
  
  if (existsSync(projectPath)) {
    const overwrite = await prompts({
      type: 'confirm',
      name: 'overwrite',
      message: `目录 ${name} 已存在，是否覆盖？`,
      initial: false
    });
    
    if (!overwrite.overwrite) {
      console.log('❌ 操作已取消');
      return;
    }
  }
  
  mkdirSync(projectPath, { recursive: true });
  
  // 生成项目文件
  await generateProjectFiles(projectPath, name, templateResponse.template);
  
  console.log('✅ 项目创建成功!');
  console.log(`\n📁 项目路径: ${projectPath}`);
  console.log('\n🎯 下一步:');
  console.log(`   cd ${name}`);
  console.log('   npm install');
  console.log('   npm run dev');
}

// 生成项目文件
async function generateProjectFiles(projectPath: string, projectName: string, template: string) {
  // 创建 package.json
  const packageJson: any = {
    name: projectName,
    version: '1.0.0',
    description: `${projectName} - Generated by GGBond CLI`,
    main: 'index.js',
    scripts: {
      dev: 'echo "开发服务器启动中..."',
      build: 'echo "项目构建中..."',
      start: 'echo "项目启动中..."'
    },
    keywords: [],
    author: '',
    license: 'MIT'
  };
  
  // 根据模板添加特定依赖
  switch (template) {
    case 'react-ts':
      packageJson.scripts = {
        dev: 'vite',
        build: 'tsc && vite build',
        preview: 'vite preview'
      };
      break;
    case 'vue-ts':
      packageJson.scripts = {
        dev: 'vite',
        build: 'vue-tsc && vite build',
        preview: 'vite preview'
      };
      break;
    case 'node-express':
      packageJson.scripts = {
        dev: 'nodemon src/index.js',
        build: 'echo "Node.js项目无需构建"',
        start: 'node src/index.js'
      };
      break;
  }
  
  writeFileSync(
    join(projectPath, 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );
  
  // 创建 README.md
  const readme = `# ${projectName}

${packageJson.description}

## 安装依赖

\`\`\`bash
npm install
\`\`\`

## 开发

\`\`\`bash
npm run dev
\`\`\`

## 构建

\`\`\`bash
npm run build
\`\`\`

## 启动

\`\`\`bash
npm start
\`\`\`
`;
  
  writeFileSync(join(projectPath, 'README.md'), readme);
  
  // 创建 .gitignore
  const gitignore = `node_modules/
dist/
build/
.env
.env.local
.DS_Store
*.log
`;
  
  writeFileSync(join(projectPath, '.gitignore'), gitignore);
  
  // 根据模板创建特定文件
  await createTemplateFiles(projectPath, template);
}

// 创建模板特定文件
async function createTemplateFiles(projectPath: string, template: string) {
  const srcPath = join(projectPath, 'src');
  mkdirSync(srcPath, { recursive: true });
  
  switch (template) {
    case 'react-ts':
      // 创建基本的 React + TypeScript 文件
      writeFileSync(join(srcPath, 'App.tsx'), `import React from 'react';

function App() {
  return (
    <div className="App">
      <h1>Hello GGBond CLI!</h1>
      <p>React + TypeScript 项目模板</p>
    </div>
  );
}

export default App;
`);
      break;
      
    case 'vue-ts':
      // 创建基本的 Vue + TypeScript 文件
      writeFileSync(join(srcPath, 'App.vue'), `<template>
  <div id="app">
    <h1>Hello GGBond CLI!</h1>
    <p>Vue + TypeScript 项目模板</p>
  </div>
</template>

<script setup lang="ts">
// Vue 3 Composition API with TypeScript
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  text-align: center;
  margin-top: 60px;
}
</style>
`);
      break;
      
    case 'node-express':
      // 创建基本的 Node.js + Express 文件
      writeFileSync(join(srcPath, 'index.js'), `const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.json({
    message: 'Hello GGBond CLI!',
    description: 'Node.js + Express 项目模板'
  });
});

app.listen(port, () => {
  console.log(\`🚀 服务器运行在 http://localhost:\${port}\`);
});
`);
      break;
      
    case 'basic-ts':
      // 创建基本的 TypeScript 文件
      writeFileSync(join(srcPath, 'index.ts'), `console.log('Hello GGBond CLI!');
console.log('Basic TypeScript 项目模板');

// 示例函数
function greet(name: string): string {
  return \`Hello, \${name}!\`;
}

console.log(greet('GGBond'));
`);
      break;
  }
}

// 项目构建函数
async function buildProject(options: any) {
  console.log(`🔨 开始构建项目...`);
  console.log(`📦 构建环境: ${options.env}`);
  console.log(`📁 输出目录: ${options.output}`);

  try {
    // 检查是否存在 package.json
    if (!existsSync('package.json')) {
      throw new Error('当前目录不是一个有效的项目目录（缺少 package.json）');
    }

    // 执行构建命令
    console.log('⚡ 执行构建命令...');
    execSync('npm run build', { stdio: 'inherit' });

    console.log('✅ 项目构建完成!');
  } catch (error) {
    throw new Error(`构建失败: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// 开发服务器函数
async function startDevServer(options: any) {
  console.log(`🚀 启动开发服务器...`);
  console.log(`🌐 地址: http://${options.host}:${options.port}`);
  
  try {
    // 检查是否存在 package.json
    if (!existsSync('package.json')) {
      throw new Error('当前目录不是一个有效的项目目录（缺少 package.json）');
    }
    
    // 设置环境变量
    process.env.PORT = options.port;
    process.env.HOST = options.host;
    
    // 执行开发命令
    console.log('⚡ 启动开发服务器...');
    execSync('npm run dev', { stdio: 'inherit' });
    
  } catch (error) {
    throw new Error(`开发服务器启动失败: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// 解析命令行参数
program.parse();